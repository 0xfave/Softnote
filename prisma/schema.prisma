// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  telegramId      String   @unique
  username        String   @unique
  photoUrl        String?  // Optional field for photo URL
  level           Int      @default(0)
  coins           Int      @default(0)
  taps            Int      @default(500)
  maxTaps         Int      @default(500)
  refillRate      Int      @default(1)
  lastRefillTime  DateTime @default(now())
  slots           Int      @default(0)
  referralCount   Int      @default(0)
  referredBy      String?
  referrals       Referral[]
  freeSpins       Int      @default(0)
  multitap        Int      @default(1)
  tapLimitBoost   Int      @default(1)
  tappingGuruUses Int      @default(3)
  profitPerHour   Int      @default(0)
  lastEarningsUpdate DateTime? 
  lastCheckIn     DateTime?
  checkInStreak   Int      @default(0)
  lastSpinTime  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  cards           CardPurchase[]
  userTasks       UserTask[]

}

model CardPurchase {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  cardId     String   @db.ObjectId
  level      Int      @default(1) // Level of the card (1-12)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  card       Card     @relation(fields: [cardId], references: [id])
}

model Card {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @unique
  category       CardCategory  // Enum for category: Skill, Business, Special
  baseProfit     Int           // Base profit per hour when at level 1
  profitIncrease Float         // Multiplier for profit increase per level
  maxLevel       Int           @default(12) // Maximum level of the card
  baseCost       Int          // Initial cost of the card at level 1, nullable for cards with prerequisites
  costIncrease   Float        // Multiplier for cost increase per level, nullable for cards with prerequisites
  requires       String?       // Requirements for this card to be available, nullable for cards without requirements
  imagePath      String        // Path to the card image
  coinIcon       String        // Path to the coin icon associated with the card
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  cardPurchases  CardPurchase[]
}



model Referral {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   // The user who made the referral
  referredId  String   // The referred user ID
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade) // User who made the referral
  createdAt   DateTime @default(now())

  @@map("referrals")
}
model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    TaskCategory  // Enum: INVITE, CHALLENGE
  description String   // Task description
  levelName   String?  // Only for CHALLENGE category tasks
  reward      Int      // Reward amount in coins
  requiredInvites Int? // For INVITE tasks, number of invites required

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userTasks   UserTask[]  // Relationship to track user-specific tasks
}

model UserTask {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  taskId      String   @db.ObjectId
  claimed     Boolean  @default(false)  // Tracks if the reward has been claimed
  
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  task        Task     @relation(fields: [taskId], references: [id])
}


enum CardCategory {
  SKILL
  BUSINESS
  SPECIAL
}


enum TaskCategory {
  INVITE
  CHALLENGE
}
